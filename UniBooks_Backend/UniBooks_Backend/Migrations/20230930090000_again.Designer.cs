// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniBooks_Backend.Models;

#nullable disable

namespace UniBooks_Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230930090000_again")]
    partial class again
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniBooks_Backend.Model.EquipmentOrder_Captured", b =>
                {
                    b.Property<int>("EquipmentOrder_ID")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_Bought")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("EquipmentOrder_ID", "Equipment_ID");

                    b.HasIndex("Employee_ID");

                    b.HasIndex("Equipment_ID");

                    b.ToTable("EquipmentOrder_CapturedEntity");
                });

            modelBuilder.Entity("UniBooks_Backend.Model.Supplier", b =>
                {
                    b.Property<int>("Supplier_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Supplier_ID"), 1L, 1);

                    b.Property<string>("Supplier_Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Supplier_CellNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Supplier_Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Supplier_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Supplier_ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Audit_Entry_Type", b =>
                {
                    b.Property<int>("Audit_Entry_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Audit_Entry_Type_ID"), 1L, 1);

                    b.Property<string>("UserAction")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Audit_Entry_Type_ID");

                    b.ToTable("AuditEntryTypes");

                    b.HasData(
                        new
                        {
                            Audit_Entry_Type_ID = 1,
                            UserAction = "BackUpSystemData"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 2,
                            UserAction = "RestoreSystemData"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 3,
                            UserAction = "UpdateVAT"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 4,
                            UserAction = "ViewVAT"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 5,
                            UserAction = "AddUserRole"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 6,
                            UserAction = "UpdateUserRole"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 7,
                            UserAction = "DeleteUserRole"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 8,
                            UserAction = "AddHelpTip"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 9,
                            UserAction = "UpdateHelpTip"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 10,
                            UserAction = "DeleteHelpTip"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 11,
                            UserAction = "SendNewsletter"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 12,
                            UserAction = "PerformStockTake"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 13,
                            UserAction = "WriteOffInventory"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 14,
                            UserAction = "ViewAuditTrail"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 15,
                            UserAction = "UploadPrescribedBookList"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 16,
                            UserAction = "AddPrescribedBook"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 17,
                            UserAction = "AddBook"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 18,
                            UserAction = "UpdateBook"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 19,
                            UserAction = "DeleteBook"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 20,
                            UserAction = "AddModule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 21,
                            UserAction = "UpdateModule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 22,
                            UserAction = "DeleteModule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 23,
                            UserAction = "AddFaculty"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 24,
                            UserAction = "UpdateFaculty"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 25,
                            UserAction = "DeleteFaculty"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 26,
                            UserAction = "AddDepartment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 27,
                            UserAction = "UpdateDepartment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 28,
                            UserAction = "DeleteDepartment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 29,
                            UserAction = "AddEvaluationSchedule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 30,
                            UserAction = "UpdateEvaluationSchedule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 31,
                            UserAction = "RemoveEvaluationSchedule"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 32,
                            UserAction = "EvaluationScheduleSummary"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 33,
                            UserAction = "GenerateBookVoucher"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 34,
                            UserAction = "UpdateBookVoucher"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 35,
                            UserAction = "DeleteBookVoucher"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 36,
                            UserAction = "AddEmployee"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 37,
                            UserAction = "UpdateEmployee"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 38,
                            UserAction = "DeleteEmployee"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 39,
                            UserAction = "AddEmployeeType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 40,
                            UserAction = "UpdateEmployeeType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 41,
                            UserAction = "DeleteEmployeeType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 42,
                            UserAction = "AddEquipment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 43,
                            UserAction = "UpdateEquipment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 44,
                            UserAction = "DeleteEquipment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 45,
                            UserAction = "AddEquipmentType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 46,
                            UserAction = "UpdateEquipmentType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 47,
                            UserAction = "DeleteEquipmentType"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 48,
                            UserAction = "CaptureEquipment"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 49,
                            UserAction = "AddStudent"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 50,
                            UserAction = "UpdateStudent"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 51,
                            UserAction = "DeleteStudent"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 52,
                            UserAction = "WalkInSalesReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 53,
                            UserAction = "BookInventoryReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 54,
                            UserAction = "LabEquipmentInventoryReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 55,
                            UserAction = "OnlineOrdersReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 56,
                            UserAction = "ResellersReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 57,
                            UserAction = "AuditTrailReport"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 58,
                            UserAction = "AddSupplier"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 59,
                            UserAction = "UpdateSupplier"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 60,
                            UserAction = "DeleteSupplier"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 61,
                            UserAction = "DownloadNewsletterFile"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 62,
                            UserAction = "LoggedIn"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 63,
                            UserAction = "LoggedOut"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 64,
                            UserAction = "ProcessOrder"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 65,
                            UserAction = "LogCollection"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 66,
                            UserAction = "MakeSale"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 67,
                            UserAction = "GenerateSalesSummary"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 68,
                            UserAction = "EvaluatedBook"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 69,
                            UserAction = "LoggedResaleExchange"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 70,
                            UserAction = "UpdateResellerPercent"
                        },
                        new
                        {
                            Audit_Entry_Type_ID = 71,
                            UserAction = "CapturedSale"
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Audit_Trail", b =>
                {
                    b.Property<int>("Audit_Trail_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Audit_Trail_ID"), 1L, 1);

                    b.Property<int?>("Audit_Entry_Type_ID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.HasKey("Audit_Trail_ID");

                    b.HasIndex("Audit_Entry_Type_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Book_Inventory", b =>
                {
                    b.Property<int>("Book_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Book_ID"), 1L, 1);

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity_On_Hand")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Book_ID");

                    b.HasIndex("ISBN");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Booking", b =>
                {
                    b.Property<int>("Booking_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Booking_ID"), 1L, 1);

                    b.Property<int>("Num_Of_Books")
                        .HasColumnType("int");

                    b.Property<string>("Reference_Num")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Schedule_ID")
                        .HasColumnType("int");

                    b.HasKey("Booking_ID");

                    b.HasIndex("Schedule_ID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ChangeRequest", b =>
                {
                    b.Property<int>("Request_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Request_ID"), 1L, 1);

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response_Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Student_ID")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Submit_Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Request_ID");

                    b.HasIndex("Employee_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("ChangeRequests");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_ID"), 1L, 1);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Faculty_ID")
                        .HasColumnType("int");

                    b.HasKey("Department_ID");

                    b.HasIndex("Faculty_ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Employee", b =>
                {
                    b.Property<int>("Employee_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Employee_ID"), 1L, 1);

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cell_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Emergency_Contact_Cell")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Emergency_Contact_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Employee_Type_ID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Physical_Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Employee_ID");

                    b.HasIndex("Employee_Type_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Employee_Type", b =>
                {
                    b.Property<int>("Employee_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Employee_Type_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Employee_Type_ID");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Equipment", b =>
                {
                    b.Property<int>("Equipment_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Equipment_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EquipmentType_ID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Module_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity_On_Hand")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("Equipment_ID");

                    b.HasIndex("EquipmentType_ID");

                    b.HasIndex("Module_ID");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Equipment_Type", b =>
                {
                    b.Property<int>("EquipmentType_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentType_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EquipmentType_ID");

                    b.ToTable("EquipmentType");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.EquipmentOrder", b =>
                {
                    b.Property<int>("EquipmentOrder_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentOrder_ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Receipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Supplier_ID")
                        .HasColumnType("int");

                    b.HasKey("EquipmentOrder_ID");

                    b.HasIndex("Supplier_ID");

                    b.ToTable("EquipmentOrders");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Evalaution_Book_Log", b =>
                {
                    b.Property<int>("Evaluation_Book_Log_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Evaluation_Book_Log_ID"), 1L, 1);

                    b.Property<int?>("Booking_ID")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Student_ID")
                        .HasColumnType("int");

                    b.HasKey("Evaluation_Book_Log_ID");

                    b.HasIndex("Booking_ID")
                        .IsUnique()
                        .HasFilter("[Booking_ID] IS NOT NULL");

                    b.HasIndex("Student_ID");

                    b.ToTable("EvalautionBookLog");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Faculty", b =>
                {
                    b.Property<int>("Faculty_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Faculty_ID"), 1L, 1);

                    b.Property<string>("Faculty_Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Faculty_ID");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Help", b =>
                {
                    b.Property<int>("Help_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Help_ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Help_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("Help");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Module", b =>
                {
                    b.Property<int>("Module_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Module_ID"), 1L, 1);

                    b.Property<int>("Department_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Module_Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.HasKey("Module_ID");

                    b.HasIndex("Department_ID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Newsletter", b =>
                {
                    b.Property<int>("Newsletter_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Newsletter_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Newsletter_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order", b =>
                {
                    b.Property<int>("Order_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Order_ID"), 1L, 1);

                    b.Property<string>("Collector_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date_Of_Collection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order_Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Order_Reference_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Order_Status_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Order_Total")
                        .HasMaxLength(7)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Voucher_ID")
                        .HasColumnType("int");

                    b.HasKey("Order_ID");

                    b.HasIndex("Order_Status_ID");

                    b.HasIndex("Student_ID");

                    b.HasIndex("Voucher_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order_Line", b =>
                {
                    b.Property<int>("Item_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Item_ID"), 1L, 1);

                    b.Property<int?>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Order_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Item_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("Equipment_ID");

                    b.HasIndex("Order_ID");

                    b.ToTable("OrderLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order_Status", b =>
                {
                    b.Property<int>("Order_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Order_Status_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Order_Status_ID");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Order_Status_ID = 1,
                            Description = "Order is being prepared ",
                            StatusName = "Order placed"
                        },
                        new
                        {
                            Order_Status_ID = 2,
                            Description = "Order is ready for collection",
                            StatusName = "Ready for collection"
                        },
                        new
                        {
                            Order_Status_ID = 3,
                            Description = "Order cycle completed",
                            StatusName = "Order collected"
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Payment_Type", b =>
                {
                    b.Property<int>("PaymentType_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentType_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentType_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentType_ID");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            PaymentType_ID = 1,
                            Description = "Payment via Card",
                            PaymentType_Name = "Card"
                        },
                        new
                        {
                            PaymentType_ID = 2,
                            Description = "Payment via Cash",
                            PaymentType_Name = "Cash"
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Prescribed_Book", b =>
                {
                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Edition")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("Module_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Prescribed_Book_List_ID")
                        .HasColumnType("int");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("ISBN");

                    b.HasIndex("Module_ID");

                    b.HasIndex("Prescribed_Book_List_ID");

                    b.ToTable("PrescribedBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Prescribed_Book_List", b =>
                {
                    b.Property<int>("Prescribed_Book_List_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Prescribed_Book_List_ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Excel_File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Prescribed_Book_List_ID");

                    b.ToTable("PrescribedBookList");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Price", b =>
                {
                    b.Property<int>("Price_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Price_ID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Book_ID")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Equipment_ID")
                        .HasColumnType("int");

                    b.HasKey("Price_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("Equipment_ID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Resale_Log", b =>
                {
                    b.Property<int>("ResaleLog_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResaleLog_ID"), 1L, 1);

                    b.Property<decimal>("Amount_Exchanged")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Evaluation_Book_Log_ID")
                        .HasColumnType("int");

                    b.HasKey("ResaleLog_ID");

                    b.HasIndex("Evaluation_Book_Log_ID")
                        .IsUnique();

                    b.ToTable("ResaleLog");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ResalePercent", b =>
                {
                    b.Property<int>("Percent_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Percent_Id"), 1L, 1);

                    b.Property<decimal>("Percent_Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Percent_Id");

                    b.ToTable("resalePercent");

                    b.HasData(
                        new
                        {
                            Percent_Id = 1,
                            Percent_Value = 2.00m
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Reseller_Book", b =>
                {
                    b.Property<int>("Reseller_Book_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reseller_Book_ID"), 1L, 1);

                    b.Property<int?>("Booking_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("Estimated_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageBinder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOpen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reseller_Book_Status_ID")
                        .HasColumnType("int");

                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.HasKey("Reseller_Book_ID");

                    b.HasIndex("Booking_ID");

                    b.HasIndex("ISBN");

                    b.HasIndex("Reseller_Book_Status_ID");

                    b.HasIndex("Student_ID");

                    b.ToTable("ResellerBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Reseller_Book_Status", b =>
                {
                    b.Property<int>("Reseller_Book_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Reseller_Book_Status_ID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Reseller_Book_Status_ID");

                    b.ToTable("ResellerBookStatus");

                    b.HasData(
                        new
                        {
                            Reseller_Book_Status_ID = 1,
                            Description = "Book evaluation",
                            StatusName = "Waiting for booking"
                        },
                        new
                        {
                            Reseller_Book_Status_ID = 2,
                            Description = "Book booked for evalaution",
                            StatusName = "Booked for evaluation"
                        },
                        new
                        {
                            Reseller_Book_Status_ID = 3,
                            Description = "",
                            StatusName = "Evalaution Completed"
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Schedule", b =>
                {
                    b.Property<int>("Schedule_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Schedule_ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("Slots_Available")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.HasKey("Schedule_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCart_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCart_ID"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShoppingCart_ID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart_Book", b =>
                {
                    b.Property<int>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCart_ID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Book_ID", "ShoppingCart_ID");

                    b.HasIndex("ShoppingCart_ID");

                    b.ToTable("ShoppingCartBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart_Equipment", b =>
                {
                    b.Property<int>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCart_ID")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Equipment_ID", "ShoppingCart_ID");

                    b.HasIndex("ShoppingCart_ID");

                    b.ToTable("ShoppingCartEquipment");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Stock_Take", b =>
                {
                    b.Property<int>("StockTake_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTake_ID"), 1L, 1);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockTake_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("StockTake");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Stock_Take_Line", b =>
                {
                    b.Property<int>("StockTake_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockTake_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("Equipment_ID");

                    b.ToTable("StockTakeLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Student", b =>
                {
                    b.Property<int>("Student_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_ID"), 1L, 1);

                    b.Property<string>("Cell_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Student_ID");

                    b.HasIndex("User_ID")
                        .IsUnique()
                        .HasFilter("[User_ID] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Student_Newsletter", b =>
                {
                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.Property<int>("Newsletter_ID")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Student_ID", "Newsletter_ID");

                    b.HasIndex("Newsletter_ID");

                    b.ToTable("StudentNewsletter");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.VAT", b =>
                {
                    b.Property<int>("VAT_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VAT_ID"), 1L, 1);

                    b.Property<decimal>("Percent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VAT_ID");

                    b.ToTable("VATs");

                    b.HasData(
                        new
                        {
                            VAT_ID = 1,
                            Percent = 15.00m
                        });
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Voucher", b =>
                {
                    b.Property<int>("Voucher_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Voucher_ID"), 1L, 1);

                    b.Property<string>("Expiry_Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Percent")
                        .HasMaxLength(4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Voucher_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Voucher_ID");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSale", b =>
                {
                    b.Property<int>("WalkInSale_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalkInSale_ID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType_ID")
                        .HasColumnType("int");

                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasMaxLength(8)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Voucher_ID")
                        .HasColumnType("int");

                    b.HasKey("WalkInSale_ID");

                    b.HasIndex("Employee_ID");

                    b.HasIndex("PaymentType_ID");

                    b.HasIndex("Student_ID");

                    b.HasIndex("Voucher_ID");

                    b.ToTable("WalkInSales");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleBookLink", b =>
                {
                    b.Property<int>("WalkInSale_ID")
                        .HasColumnType("int");

                    b.Property<int>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalkInSale_ID", "Book_ID");

                    b.HasIndex("Book_ID");

                    b.ToTable("WalkInSaleBookLink");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleBooks", b =>
                {
                    b.Property<int>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int>("WalkInSale_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WalkInSaleBookLinkBook_ID")
                        .HasColumnType("int");

                    b.Property<int?>("WalkInSaleBookLinkWalkInSale_ID")
                        .HasColumnType("int");

                    b.HasKey("Book_ID", "WalkInSale_ID");

                    b.HasIndex("WalkInSale_ID");

                    b.HasIndex("WalkInSaleBookLinkWalkInSale_ID", "WalkInSaleBookLinkBook_ID");

                    b.ToTable("walkinsalebooks");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleEquipmentLink", b =>
                {
                    b.Property<int>("WalkInSale_ID")
                        .HasColumnType("int");

                    b.Property<int>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalkInSale_ID", "Equipment_ID");

                    b.HasIndex("Equipment_ID");

                    b.ToTable("WalkInSaleEquipmentLink");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSalesEquipment", b =>
                {
                    b.Property<int>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("WalkInSale_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Equipment_ID", "WalkInSale_ID");

                    b.HasIndex("WalkInSale_ID");

                    b.ToTable("WalkinsaleEquipment");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Write_Off", b =>
                {
                    b.Property<int>("Write_Off_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Write_Off_ID"), 1L, 1);

                    b.Property<int?>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Write_Off_Date")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Write_Off_ID");

                    b.HasIndex("Employee_ID");

                    b.ToTable("WriteOff");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Write_Off_Line", b =>
                {
                    b.Property<int>("Write_Off_ID")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int?>("Book_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Equipment_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Write_Off_ID");

                    b.HasIndex("Book_ID");

                    b.HasIndex("Equipment_ID");

                    b.ToTable("WriteOffLine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniBooks_Backend.Model.EquipmentOrder_Captured", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("EquipmentOrder_CapturedEntity")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.EquipmentOrder", "EquipmentOrders")
                        .WithMany("EquipmentOrder_CapturedEntity")
                        .HasForeignKey("EquipmentOrder_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("EquipmentOrder_CapturedEntity")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("EquipmentOrders");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Audit_Trail", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Audit_Entry_Type", "AuditEntryTypes")
                        .WithMany("AuditTrail")
                        .HasForeignKey("Audit_Entry_Type_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("AuditTrail")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuditEntryTypes");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Book_Inventory", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Prescribed_Book", "PrescribedBook")
                        .WithMany("Books")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PrescribedBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Booking", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Schedule", "Schedules")
                        .WithMany("Bookings")
                        .HasForeignKey("Schedule_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ChangeRequest", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("ChangeRequests")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Department", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Faculty", "Faculties")
                        .WithMany("Departments")
                        .HasForeignKey("Faculty_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Employee", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee_Type", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("Employee_Type_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.AppUser", "AppUsers")
                        .WithOne("Employees")
                        .HasForeignKey("UniBooks_Backend.Models.Employee", "User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUsers");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Equipment", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Equipment_Type", "Equipment_Types")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentType_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Module", "Modules")
                        .WithMany("Equipments")
                        .HasForeignKey("Module_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment_Types");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.EquipmentOrder", b =>
                {
                    b.HasOne("UniBooks_Backend.Model.Supplier", "Suppliers")
                        .WithMany("EquipmentOrders")
                        .HasForeignKey("Supplier_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Evalaution_Book_Log", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Booking", "Bookings")
                        .WithOne("EvaluationBookLog")
                        .HasForeignKey("UniBooks_Backend.Models.Evalaution_Book_Log", "Booking_ID");

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("EvalautionBookLogs")
                        .HasForeignKey("Student_ID");

                    b.Navigation("Bookings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Help", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("Help")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Module", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Department", "Departments")
                        .WithMany("Modules")
                        .HasForeignKey("Department_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Newsletter", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("Newsletters")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Order_Status", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("Order_Status_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("Orders")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Voucher", "Vouchers")
                        .WithMany("Orders")
                        .HasForeignKey("Voucher_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrderStatus");

                    b.Navigation("Students");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order_Line", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Book_Inventory")
                        .WithMany("OrderLine")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipment")
                        .WithMany("OrderLine")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniBooks_Backend.Models.Order", "Orders")
                        .WithMany("OrderLine")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book_Inventory");

                    b.Navigation("Equipment");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Prescribed_Book", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Module", "Modules")
                        .WithMany("PrescribedBook")
                        .HasForeignKey("Module_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Prescribed_Book_List", null)
                        .WithMany("PrescribedBook")
                        .HasForeignKey("Prescribed_Book_List_ID");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Price", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Books")
                        .WithMany("Prices")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("Prices")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Books");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Resale_Log", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Evalaution_Book_Log", "EvalautionBookLog")
                        .WithOne("ResaleLog")
                        .HasForeignKey("UniBooks_Backend.Models.Resale_Log", "Evaluation_Book_Log_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvalautionBookLog");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Reseller_Book", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Booking", "Bookings")
                        .WithMany("ResellerBook")
                        .HasForeignKey("Booking_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniBooks_Backend.Models.Prescribed_Book", "PrescribedBook")
                        .WithMany("ResellerBook")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Reseller_Book_Status", "ResellerBookStatus")
                        .WithMany("ResellerBook")
                        .HasForeignKey("Reseller_Book_Status_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("ResellerBook")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("PrescribedBook");

                    b.Navigation("ResellerBookStatus");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Schedule", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("Schedules")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Student", "Student")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("UniBooks_Backend.Models.ShoppingCart", "StudentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart_Book", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Books")
                        .WithMany("ShoppingCartBook")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartBook")
                        .HasForeignKey("ShoppingCart_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart_Equipment", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("ShoppingCartEquipment")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartEquipment")
                        .HasForeignKey("ShoppingCart_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipments");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Stock_Take", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("StockTake")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Stock_Take_Line", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Books")
                        .WithMany("StockTakeLine")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("StockTakeLine")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniBooks_Backend.Models.Stock_Take", "StockTake")
                        .WithMany("StockTakeLine")
                        .HasForeignKey("StockTake_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Equipments");

                    b.Navigation("StockTake");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Student", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.AppUser", "AppUsers")
                        .WithOne("Students")
                        .HasForeignKey("UniBooks_Backend.Models.Student", "User_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Student_Newsletter", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Newsletter", "Newsletters")
                        .WithMany("StudentNewsletter")
                        .HasForeignKey("Newsletter_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("StudentNewsletter")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Newsletters");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSale", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("WalkInSales")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Payment_Type", "PaymentType")
                        .WithMany("WalkInSales")
                        .HasForeignKey("PaymentType_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Student", "Students")
                        .WithMany("WalkInSales")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.Voucher", "Vouchers")
                        .WithMany("WalkInSales")
                        .HasForeignKey("Voucher_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");

                    b.Navigation("PaymentType");

                    b.Navigation("Students");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleBookLink", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Book")
                        .WithMany("WalkInSalesBooksLink")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.WalkInSale", "WalkInSale")
                        .WithMany("WalkInSaleBooksLink")
                        .HasForeignKey("WalkInSale_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("WalkInSale");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleBooks", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Books")
                        .WithMany("Walkinsalesbooks")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.WalkInSale", "Walkinsale")
                        .WithMany("walkinsalebooks")
                        .HasForeignKey("WalkInSale_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.WalkInSaleBookLink", null)
                        .WithMany("WalkInSalesBooks")
                        .HasForeignKey("WalkInSaleBookLinkWalkInSale_ID", "WalkInSaleBookLinkBook_ID");

                    b.Navigation("Books");

                    b.Navigation("Walkinsale");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleEquipmentLink", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipment")
                        .WithMany("WalkInSaleEquipmentLink")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.WalkInSale", "WalkInSale")
                        .WithMany("WalkInSaleEquipmentLink")
                        .HasForeignKey("WalkInSale_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("WalkInSale");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSalesEquipment", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("Walkinsaleequipment")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UniBooks_Backend.Models.WalkInSale", "Walkinsale")
                        .WithMany("walkinsaleequipment")
                        .HasForeignKey("WalkInSale_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipments");

                    b.Navigation("Walkinsale");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Write_Off", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Employee", "Employees")
                        .WithMany("WriteOff")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Write_Off_Line", b =>
                {
                    b.HasOne("UniBooks_Backend.Models.Book_Inventory", "Books")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("Book_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniBooks_Backend.Models.Equipment", "Equipments")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("Equipment_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniBooks_Backend.Models.Write_Off", "WriteOff")
                        .WithMany("WriteOffLine")
                        .HasForeignKey("Write_Off_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Equipments");

                    b.Navigation("WriteOff");
                });

            modelBuilder.Entity("UniBooks_Backend.Model.Supplier", b =>
                {
                    b.Navigation("EquipmentOrders");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.AppUser", b =>
                {
                    b.Navigation("Employees")
                        .IsRequired();

                    b.Navigation("Students")
                        .IsRequired();
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Audit_Entry_Type", b =>
                {
                    b.Navigation("AuditTrail");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Book_Inventory", b =>
                {
                    b.Navigation("OrderLine");

                    b.Navigation("Prices");

                    b.Navigation("ShoppingCartBook");

                    b.Navigation("StockTakeLine");

                    b.Navigation("WalkInSalesBooksLink");

                    b.Navigation("Walkinsalesbooks");

                    b.Navigation("WriteOffLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Booking", b =>
                {
                    b.Navigation("EvaluationBookLog")
                        .IsRequired();

                    b.Navigation("ResellerBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Department", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Employee", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("ChangeRequests");

                    b.Navigation("EquipmentOrder_CapturedEntity");

                    b.Navigation("Help");

                    b.Navigation("Newsletters");

                    b.Navigation("Schedules");

                    b.Navigation("StockTake");

                    b.Navigation("WalkInSales");

                    b.Navigation("WriteOff");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Employee_Type", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentOrder_CapturedEntity");

                    b.Navigation("OrderLine");

                    b.Navigation("Prices");

                    b.Navigation("ShoppingCartEquipment");

                    b.Navigation("StockTakeLine");

                    b.Navigation("WalkInSaleEquipmentLink");

                    b.Navigation("Walkinsaleequipment");

                    b.Navigation("WriteOffLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Equipment_Type", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.EquipmentOrder", b =>
                {
                    b.Navigation("EquipmentOrder_CapturedEntity");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Evalaution_Book_Log", b =>
                {
                    b.Navigation("ResaleLog")
                        .IsRequired();
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Module", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("PrescribedBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Newsletter", b =>
                {
                    b.Navigation("StudentNewsletter");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order", b =>
                {
                    b.Navigation("OrderLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Order_Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Payment_Type", b =>
                {
                    b.Navigation("WalkInSales");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Prescribed_Book", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("ResellerBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Prescribed_Book_List", b =>
                {
                    b.Navigation("PrescribedBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Reseller_Book_Status", b =>
                {
                    b.Navigation("ResellerBook");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Schedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartBook");

                    b.Navigation("ShoppingCartEquipment");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Stock_Take", b =>
                {
                    b.Navigation("StockTakeLine");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Student", b =>
                {
                    b.Navigation("ChangeRequests");

                    b.Navigation("EvalautionBookLogs");

                    b.Navigation("Orders");

                    b.Navigation("ResellerBook");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("StudentNewsletter");

                    b.Navigation("WalkInSales");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Voucher", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WalkInSales");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSale", b =>
                {
                    b.Navigation("WalkInSaleBooksLink");

                    b.Navigation("WalkInSaleEquipmentLink");

                    b.Navigation("walkinsalebooks");

                    b.Navigation("walkinsaleequipment");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.WalkInSaleBookLink", b =>
                {
                    b.Navigation("WalkInSalesBooks");
                });

            modelBuilder.Entity("UniBooks_Backend.Models.Write_Off", b =>
                {
                    b.Navigation("WriteOffLine");
                });
#pragma warning restore 612, 618
        }
    }
}
